import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

const TaskManagementApp = () => {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState({ title: '', description: '' });
  const [search, setSearch] = useState('');

  useEffect(() => {
    fetchTasks();
  }, []);

  const fetchTasks = async () => {
    try {
      const response = await axios.get('/api/tasks');
      if (response.data && Array.isArray(response.data)) {
        setTasks(response.data);
      } else {
        console.error('Unexpected response format:', response.data);
      }
    } catch (error) {
      console.error('Error fetching tasks:', error);
    }
  };

  const addTask = async () => {
    if (!newTask.title || !newTask.description) return;
    try {
      const response = await axios.post('/api/tasks', newTask);
      if (response.data) {
        setTasks([...tasks, response.data]);
        setNewTask({ title: '', description: '' });
      } else {
        console.error('Unexpected response format:', response.data);
      }
    } catch (error) {
      console.error('Error adding task:', error);
    }
  };

  const updateTask = async (id, updatedTask) => {
    try {
      const response = await axios.put(`/api/tasks/${id}`, updatedTask);
      if (response.data) {
        setTasks(tasks.map(task => (task.id === id ? response.data : task)));
      } else {
        console.error('Unexpected response format:', response.data);
      }
    } catch (error) {
      console.error('Error updating task:', error);
    }
  };

  const deleteTask = async (id) => {
    try {
      await axios.delete(`/api/tasks/${id}`);
      setTasks(tasks.filter(task => task.id !== id));
    } catch (error) {
      console.error('Error deleting task:', error);
    }
  };

  const filteredTasks = tasks.filter(task => task.title.toLowerCase().includes(search.toLowerCase()));

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Task Management System</h1>

      <div className="mb-4">
        <Input
          type="text"
          placeholder="Search tasks by title"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />
      </div>

      <div className="mb-4">
        <Input
          type="text"
          placeholder="Task Title"
          value={newTask.title}
          onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}
          className="mb-2"
        />
        <Input
          type="text"
          placeholder="Task Description"
          value={newTask.description}
          onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}
          className="mb-2"
        />
        <Button onClick={addTask} className="bg-blue-500 text-white">Add Task</Button>
      </div>

      <div>
        {filteredTasks.map((task) => (
          <Card key={task.id} className="mb-4">
            <CardContent>
              <h2 className="text-xl font-bold">{task.title}</h2>
              <p>{task.description}</p>
              <p>Status: {task.completed ? 'Completed' : 'Pending'}</p>

              <Button
                onClick={() => updateTask(task.id, { ...task, completed: !task.completed })}
                className="mr-2 bg-green-500 text-white"
              >
                Mark as {task.completed ? 'Pending' : 'Completed'}
              </Button>

              <Button
                onClick={() => deleteTask(task.id)}
                className="bg-red-500 text-white"
              >
                Delete
              </Button>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default TaskManagementApp;
